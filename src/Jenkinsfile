
import hudson.FilePath

pipeline {
  agent{ label 'mini' }
  environment {
    Util = load './lib/Utils.groovy'  // Библиотека
    ib = "${JOB_BASE_NAME}"           // Имя информационной базы
    DEBUG = true                      // Режим отладки
    CLADDR = 'obr-app-11'             // Адрес кластера 1С
    DTpath = 'C:/1c/dt'               // Каталог выгрузки dt файлов
    VER1C = '8.3.18.1483'             // Версия платформы 1С
    SessEnblCode = '0008'             // Код разрешения сеанса
    notyfyToken = '2djDy2SkydHJ-pE1b1cp5QaBy73yGPXx'
    DPart = Util.formatDate(Util.TimeNow(), 'yyyy-MM-dd')  // Часть имени DT файла
    DTfile = "${DPart}_${ib}.dt"      // Имя DT файла
    DT = "${DTpath}/${DTfile}"        // Полный путь к DT файлу
    NetPath = "\\\\10.51.8.10\\Backups\\1C_BACKUPS\\${ib}"    // Сетевой каталог для резервных копий
    NOTE = "Start"                    // Буферная переменная
    msg_ERR = "~"                     // Сообщения об ошибках в телеграм месседж
  }
  options {
    disableConcurrentBuilds()
    timestamps()
  }
  stages {
    stage('1. Подготовка ИБ (блокировка, удаление сеансов)') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'ClusterAdmin'
              , passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
              , usernamePassword(credentialsId: 'IBadmin'
              , passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session kill --ras ${CLADDR}
                --cluster-admin ${clADMIN} --cluster-pwd ${clPASSWD}
                --ibconnection /s${CLADDR}\\${ib}
                --db ${ib} --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
                --uccode ${SessEnblCode} --v8version ${VER1C} --try 5
              """.replaceAll( /\n\s*/, " " )

            if ( DEBUG == true ) { 
              bat returnStatus: true, script: 'echo  command  >COMMAND.1.txt' 
              echo "command: " + command
            }
            timeoutValue = 300
            RETURN_STATUS = 1
            i = 0
            retry (5) {
              i++
              if ( RETURN_STATUS == 0 ) {
                break
              } else {
                echo ">>> ПОПЫТКА " + i.toString() + " timeout: ${timeoutValue} s. <<<"
                timeout ( time: timeoutValue, unit: 'SECONDS' ) {
                  try {
                    RETURN_STATUS = bat returnStatus: true, script: "@chcp 65001>nul\n${command}"
                  } catch ( Exception e ) {
                    msg_ERR = msg_ERR + "\n1.LOCK_IB:${ib}\n" + e.toString()
                    echo "ОШИБКА: ---------------------------\n" + e.toString() + "\n-----------------------------------"
                  }
                }
              }
            }
          }
        }
        echo ">>>>>>>>>(${RETURN_STATUS}) " + currentBuild.currentResult
      }
    }
    stage ("2. Выгрузка ИБ в dt файл") {
      steps {
        script {

          def TIMES = [mc_bnu: 7200, mc_zup: 3600, mc_uat: 900, mc_zup_111: 3600]
          timeoutValue = TIMES[ib]

          withCredentials([usernamePassword(credentialsId: 'IBadmin'
            , passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')
            , usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD'
            , usernameVariable: 'clADMIN')]) {

            command = """
            call vrunner dump ${DT} 
              --ibconnection /s${CLADDR}\\${ib}
              --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
              --uccode ${SessEnblCode} 
              --v8version ${VER1C}
              --debuglog
              --debuglogfile DUMP.LOG && exit 0
            """.replaceAll( /\n\s*/, " " )

            if ( DEBUG == true ) { 
              bat "echo "+ command + " > COMMAND.2.txt" 
              echo "command: " + command
            }
            RETURN_STATUS = 1
            i = 0
            retry (5) {
              i++
              if ( RETURN_STATUS == 0 ) {
//                currentBuild.currentResult = "SUCCESS"
                break
              } else {
                File log = new File("DUMP.LOG")
                println "LOG: " + log
                if ( log.exists() ) {
                  print "delete" + log
                  final String content = readFile(file: "DUMP.LOG")
                  print "******************\n" +content+ "\n******************"
                  msg_ERR = "\n2.DUMP:\n${content}"
                  log.delete()
                  print "AFTER delete DUMP.LOG"
                }
                echo ">>> ПОПЫТКА " + i.toString() + " timeout: ${timeoutValue} s. <<<"
                try {
                  timeout ( time: timeoutValue, unit: 'SECONDS' ) {
                    RETURN_STATUS = bat returnStatus: true,
                        script: "@chcp 65001>nul \n ${command}"
                  }
                } catch ( Exception e ) {
                  msg_ERR = msg_ERR + "\n2.DUMP:\n" + e.toString()
                  echo "ОШИБКА: " + e.toString()
                }
                NOTE = "попыток: ${i.toString()}; RC: ${RETURN_STATUS}"
                
                if ( RETURN_STATUS > 0 ) {
                  throw new Exception("===Throw to retry unloading===")
                }
              }
            }
          }
          pt = new FilePath(Jenkins.getInstanceOrNull().getComputer(env.NODE_NAME).getChannel(), dt)
          dtSize = (double)pt.length()/(1024*1024)
//          if ( dtSize > 0 ) {
//            currentBuild.currentResult = 'SUCCESS'
//          }
          dtSizeStr = dtSize.round().toString() + ' mb.'
          NOTE = "Выгрузка ИБ ${CLADDR}\\${ib} в DT файл ${DTfile} (${dtSizeStr}) " + NOTE
          echo ">>>>>>>>> " + currentBuild.currentResult + " --- " + NOTE
       }
      }
    }
    stage ('3. Обновление кофигурации') {
      steps { script {
          withCredentials([usernamePassword(credentialsId: 'IBadmin'
              , passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN'),]) {
            def conn = '"Srvr=""'+CLADDR+'"";Ref=""'+ib+'"";Usr=""'+ibADMIN+'"";Pwd=""'+ibPASSWORD+'"";"'
            def StrCommand = "src/updateCf.bat " + conn + " " + SessEnblCode + " log\\updateCf.log"
            if ( DEBUG == true ) {
              bat "echo "+ StrCommand + " > COMMAND.3.txt"
              echo "command: " + StrCommand
            }
            timeout (time:30) {
              RC = bat returnStatus: true, 
              script: """@chcp 65001>nul
                ${StrCommand} """
            }
            if (RC>0) {
              final String content = readFile(file: "log\\updateCf.log")
              msg_ERR = msg_ERR + "\n3.UPDATE:\n${content}"
              bat """@chcp 65001>nul
              @echo ################# [RC:${RC}] ####################
              @type log\\updateCf.log
              @echo #############################################
              """
            }
          }
echo ">>>>>>>>> " + currentBuild.currentResult
        }
      }
    }
    stage ('4. Копирование DT в сетевой каталог') {
      steps { script {
            withCredentials([usernamePassword(credentialsId: 'goblin_moscollector'
                , passwordVariable: 'pasw', usernameVariable: 'user')]) {
              def StrCommand = """src/copyNet.bat ${DT.replaceAll( /\//, "\\\\" )} ${NetPath} ${user} ${pasw}"""
              if ( DEBUG == true ) {
                bat "echo "+ StrCommand + " > COMMAND.4.txt"
                echo "command: " + StrCommand
              }
              try {
                RC = bat returnStatus: true, 
                  script: """@chcp 65001>nul
                    ${StrCommand} """
              } catch ( Exception e ) {
                echo "ОШИБКА: " + e.toString()
              }

              if (RC>0) {
                msg_ERR = msg_ERR + "\n4.COPY:\nОшибка копирования ${DT} --> ${NetPath}"
                bat """@chcp 65001>nul
                  Set src=${DT.replaceAll( /\//, "\\\\" )}
                  Set trg=${NetPath}\\${DTfile}
                  
                  @echo ################# [RC:${RC}] ####################
                  @echo Ошибка копирования %src% в %trg%
                  @echo #############################################
                """
              } else {
               // TODO: если размер файла > 0 и дата файла сегодня
              }
            }
echo ">>>>>>>>> " + currentBuild.currentResult
      }}
    }

  }
  post {
    cleanup { script {
        echo "POST: Снятие блокировки с ИБ"
        withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session unlock
              --ras ${CLADDR}
              --cluster-admin ${clADMIN}
              --cluster-pwd ${clPASSWD}
              --ibconnection /s${CLADDR}\\${ib}
              --db ${ib} --db-user ${ibADMIN}
              --db-pwd ${ibPASSWORD}
              --uccode ${SessEnblCode}
              --v8version ${VER1C} --try 5
           """.replaceAll( /\n\s*/, " " )

            if ( DEBUG == true ) { 
              bat "echo "+ command + " > COMMAND.P.txt" 
              echo "command: " + command
            }

            bat """@chcp 65001>nul
                $command"""

        }
echo ">>>>>>>>> " + currentBuild.currentResult
    } }
    success {script{
        echo "SUCCESS"
        // notifyEvents message: "<b>${BUILD_DISPLAY_NAME}</b> Выгрузка <b>${JOB_BASE_NAME}</b> завершена успешно ${NOTE} (${currentBuild.durationString}) ${BUILD_URL}console",
        //   token: notyfyToken, title: "Успешно", level: "success"
    }}
    unsuccessful { script {
        int limit = 1024
        String log = msg_ERR.length() <= limit ? msg_ERR : '...'+msg_ERR.substring(msg_ERR.length() - limit)
        notifyEvents message: "<b>${BUILD_DISPLAY_NAME}</b> Выгрузка <b>${JOB_BASE_NAME}</b> завершена с ошибками <i>${NOTE}</i> (${currentBuild.durationString}) [${currentBuild.currentResult}] ${BUILD_URL}console\n" + log, token: notyfyToken, title: "<b>${ib}</b> Неудача", attachBuildLog: true, level: "error"
    }}
  }
}

