import hudson.FilePath

pipeline {
  agent{ label 'mini' }
  environment {
    Util = load './lib/Utils.groovy'
    ib = "${JOB_BASE_NAME}"   // Имя информационной базы
    DEBUG = true              // Режим отладки
    CLADDR = 'obr-app-11'     // Адрес кластера 1С
    DTpath = 'C:/1c/dt'       // Каталог выгрузки dt файлов
    
    VER1C = '8.3.18.1483'     // Версия платформы 1С
    enCode = '0008'           // Код разрешения сеанса
    notyfyToken = '2djDy2SkydHJ-pE1b1cp5QaBy73yGPXx'
    DPart = Util.formatDate(Util.TimeNow(), 'yyyy-MM-dd')  // Часть имени DT файла
    DTfile = "${DPart}_${ib}.dt" // Имя DT файла
    DT = "${DTpath}/${DTfile}"   // Полный путь к DT файлу
    NETpath = "\\\\10.51.8.10\\Backups\\1C_BACKUPS\\${ib}"    // Сетевой каталог для резервных копий
    NOTE = "Start"               // Буферная переменная (не исп.)
  }
  options {
    disableConcurrentBuilds()
    timestamps()
  }
  stages {
    stage('1. Подготовка ИБ (блокировка, удаление сеансов)') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session kill --ras ${CLADDR}
              --cluster-admin ${clADMIN} --cluster-pwd ${clPASSWD}
              --ibconnection /s${CLADDR}\\${ib}
              --db ${ib} --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
              --uccode ${enCode} --v8version ${VER1C}
              """.replaceAll( /\n\s*/, " " )
            
            if ( DEBUG == true ) { 
              bat "echo "+ command + " > COMMAND.1.txt" 
              echo "command: " + command
            }

            bat """chcp 65001
                ${ command } """
          }
        }
      }
    }
    stage ("2. Выгрузка ИБ в dt файл") {
      steps {
        script {
          def TIMES = [mc_bnu: 7200, mc_zup: 3600, mc_uat: 600, mc_zup_111: 3600]
          timeoutValue = TIMES[ib]

          withCredentials([usernamePassword(credentialsId: 'IBadmin'
            , passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            command = """vrunner dump ${DT} 
              --ibconnection /s${CLADDR}\\${ib}
              --db-user ${ibADMIN} --db-pwd ${ibPASSWORD}
              --uccode ${enCode} 
              --v8version ${VER1C}
              --debuglog
            """.replaceAll( /\n\s*/, " " )
            
            if ( DEBUG == true ) { 
              bat "echo "+ command + " > COMMAND.2.txt" 
              echo "command: " + command
            }
            RETURN_STATUS = 1
            i = 0
            retry (5) {
              i++
              if ( RETURN_STATUS == 0 ) {
                currentBuild.result = "SUCCESS"
                break
              } else {
                echo ">>> ПОПЫТКА " + i.toString() + " timeout: ${timeoutValue} s. <<<"
                timeout ( time: timeoutValue, unit: 'SECONDS' ) {
                  RETURN_STATUS = bat returnStatus: true,
                      script: " chcp 65001 \n ${command} "
                }
                currentBuild.result = "FAILURE"
                NOTE = "попыток: ${i.toString()}; RC: ${RETURN_STATUS}"
              }
            }
          }
          pt = new FilePath(Jenkins.getInstanceOrNull().getComputer(env.NODE_NAME).getChannel(), dt)
          dtSize = (double)pt.length()/(1024*1024)
          dtSize = dtSize.round().toString() + ' mb.'
          NOTE = " в файл ${DTfile} (${dtSize}) " + NOTE

        }
      }
    }
    stage ('3. Копирование DT в сетевой каталог') {
      steps { script {

            withCredentials([usernamePassword(credentialsId: 'goblin_moscollector', passwordVariable: 'pasw', usernameVariable: 'user')]) {
              def StrCommand = "src/copyNet.bat ${DT} ${NetPath} ${user} ${pasw}"
              if ( DEBUG == true ) { 
                bat "echo "+ StrCommand + " >> COMMAND.3.txt" 
                echo "command: " + StrCommand
              }
              bat script: """chcp 65001
                  ${StrCommand} """
            }
        }
      }
    }
  }
  post {
    cleanup { script {
        echo "POST: Снятие блокировки с ИБ"
        withCredentials([usernamePassword(credentialsId: 'ClusterAdmin', passwordVariable: 'clPASSWD', usernameVariable: 'clADMIN')
            , usernamePassword(credentialsId: 'IBadmin', passwordVariable: 'ibPASSWORD', usernameVariable: 'ibADMIN')]) {
            def command = """vrunner session unlock
              --ras ${ CLADDR }
              --cluster-admin ${ clADMIN }
              --cluster-pwd ${ clPASSWD }
              --ibconnection /s${ CLADDR }\\${ ib }
              --db ${ ib } --db-user ${ ibADMIN }
              --db-pwd ${ ibPASSWORD }
              --uccode ${ enCode }
              --v8version ${ VER1C } 
           """.replaceAll( /\n\s*/, " " )

            if ( DEBUG == true ) { 
              bat "echo "+ command + " > COMMAND.P.txt" 
              echo "command: " + command
            }

            bat """chcp 65001>nul
                $command"""
            
        }

    } }
    success {script{

        notifyEvents message: "${BUILD_DISPLAY_NAME} Выгрузка <b>${JOB_BASE_NAME}</b> завершена успешно ${NOTE}",
          token: notyfyToken, title: "Успешно", level: "success"
    }}
    unsuccessful { script {
      
        notifyEvents message: "${BUILD_DISPLAY_NAME} Выгрузка <b>${JOB_BASE_NAME}</b> завершена с ошибками ${NOTE}", 
          token: notyfyToken, title: "<b>${ib}</b> Неудача", attachBuildLog: true, level: "error"
    }}
  }
}


